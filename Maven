Maven - Day1 - Course

    1. What is maven?

    2. Maven download & installation?
    
            Refer: https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html

    3. Major advantages of maven?

            3.1. Project Management tool. (auto generate the file/folder structure).                
                    
            3.2. Automated Build tool. - lifecycle phases
            
            3.3. Managing repositories.
            
                    4.3.1. Local repo.
                    4.3.2. Central repo.
                    4.3.3. Remote repo.

    4. Maven project setup?
    
      4.1. Before project setup, create & run HelloWorld.java, Addition.java - Compiling & converting to *.class files.
      4.2. Generate a unitility/jar project using maven archetypes. & observe how the folder/file strucutre generated by maven.
      4.3. Different types of archetypes.
Different types of projects/packages in JAVA:

Project Type	Purpose	Package type	Files to be packaged	maven archetype	Where can excecute?
Executable JARs	we can execute these application whenre Java is installed.	jar	.class, .proeprties etc	maven-archetype-quickstart	Can execute on java installed machine
Utility JARs	Reusable applications. We can use these JARs in another project.	jar	.class, .proeprties etc	maven-archetype-quickstart	Can't execute, just reuse the login in another application
Web Applications	Web projects which we can run on any application servers.	war	.class, .proeprties + .html, .jsp, .xml + .jar etc	maven-archetype-webapp	Can be executed only on Application servers i.e., Tomcat, jboss, weblogic etc
Enterprise Applications	these projects which we can run on any application servers.	ear	jar(s) + war(s) etc	maven-archetype-j2ee-simple	Can be executed only on Application servers i.e., jboss, weblogic, WAS etc
=====================================================
Maven Practice
Step-1: Install jdk1.8
Refer: Java_Maven_Setup.docx which available under Day1 folder.

Download from: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html

jdk - java development kit - code compilation

jre - java runtime environment - to run the java applications

Setup the jdk path under system/user varialbles. And Create JAVA_HOME variable in system variables.

java -version --> check whtehr java setup done or not.
Step-2: Download maven & setup the path.
Refer: Java_Maven_Setup.docx which available under Day1 folder.

Doownload from: https://maven.apache.org/download.cgi

Setup the maven bin path under system/user variables.

mvn -version or mvn --version or mvn -v --> check whtehr maven setup done or not.

What is maven? --> Maven is an automated build tool.

maven will
	1. compile the code, 
	2. test the original code (i.e., compile & runn the junit tests)
	3. package the compiled code (.jar, .war, .ear, .zip etc)
	4. deploy the package to remote server (tomcat/jboss application server, nexus/artifactory package/repo manager)
	5. code coverage & quality check etc (with the help of thrid party plugin checkstyle, jacoco, sonar etc.
	
	etc

Why maven is automated build tool? -- maven has standard lifecycle pahses. --> https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html

Different types of packages in java:

	JAR, WAR, EAR, ect

	JAR - Java ARchive - simple utility project.  .class + .properties

	WAR - Web Application Resource or Web application ARchive - lot of JARs + html,jsp,js, htm, etc + .properties + etc

	EAR - enterprise archive - JARs+ WARs  OR JARs+ WARs + ESB etc

	ZIP - Zipping any files like xml or properties etc
Step-3: JAR Project Setup:
   mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

				1. maven(the above command) will create a folder structure for java project.
					two sections
					1.1. source code section - src
					1.2. build script - pom.xml - Project Object Model
				2. It will package with the type JAR.
      
Observe:
	1. src folder structure in tree command. tree /F
	2. What is maven standard path under src folder.
		2.1. src/maven/java - for original sourcs code. i.e., *.java ex: Add.java
		2.2. src/test/java - for junit files i.e., *Test.java ex: AddTest.java
	3. what is groupId, artifactId, version, package in pom.xml file. etc.
			
    Syntax to generate maven project for JAR: mvn archetype:generate -DgroupId=<your project groupid> -DartifactId=<project Name> -Dversion=<project version> -DarchetypeArtifactId=maven-archetype-quickstart
Step-4: Run the build: mvn clean package
Observe the build console:

	1. how the package is creating?
	2. whar are the minium required tags/elements in pom.xml file. (comment & un-comment some of the tags groupId, artifactId, version, package in pom.xml & then try the build)
	3. What are the maven goals are running? & what is happening for each goal like cleaning taregt folder, creating taregt folder, resource loading, compile, test compile etc
Step-5: Generate the other project structures & types
WAR Project Setup: mvn archetype:generate -DgroupId=com.doha.web.login -DartifactId=LoginApp -DarchetypeArtifactId=maven-archetype-webapp
EAR Project Setup: mvn archetype:generate -DgroupId=com.doha.web.login -DartifactId=LoginAppEAR -DarchetypeArtifactId=maven-archetype-j2ee-simple

Observe the web project file/folder strructure what are the default files/folder are created by the maven archetype.

Just run the command: mvn archetype:generate > archetypes-log.txt --> once it is done open the file archetypes-log.txt and see how many archetypes providing by maven.
Maven repositories:
Local repo: C:\Users\<username>\.m2\repository

Centarl repo (maven repo):  https://repo.maven.apache.org/

Remote repo: nexus/artifactory.

Local repo --> Centarl repo --> Remote repo
============================================================
Maven - Day2 - topics need to be covered

    1. lifecycle phases along with execution (what is happing in each phase).

    2. Open the package after the build. (use 7-zip, easy to open the archive files).
    
    3. Repository management.
    
    4. Maven dependencies.
    
            refer maven projects: https://github.com/CalculatorApps
            
            4.1. Build one jar project "Addition" & execute it. 
                    mvn goals: mvn package
                    Run the package: java -jar target/<packageName>.jar
            4.2. Build one jar project "Subtraction" & execute it. 
                    mvn goals: mvn package
                    Run the package: java -jar target/<packageName>.jar
            4.3. Build the CalculatorApp project with & without "Addition", "Subtraction" as dependencies.  
                    mvn goals: mvn package
                    Run the package: java -jar target/<packageName>.jar        
                    
                   1. Execute the maven goals one by one and see what exactly it is running.
  validate: Validating the project.
  compile : Load the original source code from src/main/java and compiling it.
  test    : Load the test source code from src/main/java and compiling it & run the test cases.
  package : Package the files from "target/classes" and other web file(if it is web application).
  verify  : run any checks to verify the package is valid and meets quality criteria
  install : install the package into the local repository, for use as a dependency in other projects locally.
  deploy  : Copies the final package to the remote repository for sharing with other developers and projects.
2. Dependencies:
  Practice with https://github.com/CalculatorApps
  =====================================================================================================
  Maven - Day3:
    1. Modules.
    
            1.1. Combine all the projects Addition, Substraction, Calculartor into one maven project.
            1.2. Establish a parent & child pom (Inheritance).
    
    2. Plugins: checkstyle plugin to check the java code quality, compiler plugin to skip some of the java files.
    
    3. Profiles.
    
    4. Different profiles activation types.
    
    5. One example with Child & parent POMs.
    
    To skip the java files from compilation: (through plugin)
<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-compiler-plugin</artifactId>
  <version>3.1</version>
  <configuration>
    <excludes>
      <exclude>com\devops\calculator\simple\Simple.java</exclude>
    </excludes>
  </configuration>
</plugin>
To skip the test cases compilation & execution (through plugin)
  <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-compiler-plugin</artifactId>
      <version>3.1</version>
      <configuration>
        <excludes>
          <exclude>com\devops\calculator\simple\Simple.java</exclude>
        </excludes>
        <skip>true</skip> -->
      </configuration>
    </plugin>
To skip the test cases execution(using maven command): mvn clean install -DskipTests=true
To skip the test cases execution(using maven command): mvn clean install -Dmaven.test.skip=true
Run checkstyle goal on your project: mvn clean install checkstyle:checkstyle
Run checkstyle goal on your project & fail the build if any errors: mvn clean install checkstyle:checkstyle checkstyle:check
Run checkstyle goal on your project & abd check the error but dont fail the build: mvn clean compile checkstyle:checkstyle checkstyle:check -Dcheckstyle.failOnViolation=false

==============================================================================
Maven Day4-Course
    1. Maven release.
    
            1.1. SNAPSHOT vs RELEASE versions.
            1.2. Local build & deploy with release version.

    2. Jenkins with maven. -- Only build
    
    3. Jenkins + Maven + Nexus.
    
            Build & deploy - SNAPSHOT version
            Build & deploy - release version
            
            Day4-Practice
Install Nexus on AWS Linux instance.
Update the nexus repo username & passowrd details details in maven settings. Update the pom.xml with Update the pom.xml with &

Try with local maven release build.
Goals: mvn -V clean -B -Dresume=false release:prepare release:perform -Dtag=WebApp-1.0.0-RC-2 -DreleaseVersion=1.0.0-RC-2

==========================================
Maven:
What is maven?
What is pom.xml file?
What is settings.xml file?
How to tell maven to use the customised local repo without configuring in settings.xml file? -Dsettings.localRepository=local path.
Maven life cycle phases?
What is plugin?
Maven dependency traverse? i.e., how maven download a dependency?
How to configure a dependency?
Exclude a dependency?
Command to update the poms with new versions? i.e., mvn versions:set -DnewVersion=2.0.0-SNAPSHOT -DgenerateBackupPoms=false.
Maven profiles?
Minium Java is required to use Maven.
What are the properties?
How to create Maven projects? i.e., maven archetypes.
Maven user level and global lever settings.xml file.
Dependency scopes? compile, provided, runtime etc.
What are the minium information/tags required in POM.xml file?
SNAPSHOT vs release versions.
What are the tags we can configure in pom.xml file? (project details- groupId, artifactId, version etc, repositories, disributedManagement, profiles, plugin, depednencies, properties, SCM etc)
What is maven release:prepare & maven:perform.
What needs to be configured in pom.xml if we need to release? ( tag)
What is in pom.xml file.
what is parent & child pom.
What is ?

===================================
#Known Maven Build Errors

1. could not find dependency: (any phase)
    -----------------------------
    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD FAILURE
    [INFO] ------------------------------------------------------------------------
    [INFO] Total time: 01:36 min
    [INFO] Finished at: 2018-05-23T11:07:36+05:30
    [INFO] ------------------------------------------------------------------------
    [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.0.0:checkstyle (default-cli) on project Addition: Execution default-cli of goal org.apache.maven.plugins:maven-checkstyle-plugin:3.0.0:checkstyle failed: Plugin org.apache.maven.plugins:maven-checkstyle-plugin:3.0.0 or one of its dependencies could not be resolved: Could not transfer artifact antlr:antlr:jar:2.7.7 from/to central (https://repo.maven.apache.org/maven2): GET request of: antlr/antlr/2.7.7/antlr-2.7.7.jar from central failed: Connection reset -> [Help 1]
2. Compilation errors: mvn compile
    [INFO] -------------------------------------------------------------
    [ERROR] COMPILATION ERROR :
    [INFO] -------------------------------------------------------------
    [ERROR] /C:/Users/mycomputer/Documents/Selenium/DevOpsWebApp/src/main/java/LoginServlet.java:[30,25] cannot find symbol
      symbol:   variable out
      location: class LoginServlet
    [ERROR] /C:/Users/mycomputer/Documents/Selenium/DevOpsWebApp/src/main/java/LoginServlet.java:[35,9] cannot find symbol
      symbol:   variable out
      location: class LoginServlet
    [INFO] 2 errors
    [INFO] -------------------------------------------------------------
    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD FAILURE
    [INFO] ------------------------------------------------------------------------
    [INFO] Total time: 3.540 s
    [INFO] Finished at: 2018-06-07T12:44:49+05:30
    [INFO] ------------------------------------------------------------------------
    [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project DevOpsWebApp: Compilation failure: Compilation failure:
3. testCompilation error: mvn test (testCompile)
    [ERROR] COMPILATION ERROR :
    [INFO] -------------------------------------------------------------
    [ERROR] /C:/Users/mycomputer/Documents/Selenium/DevOpsWebApp/src/test/java/LoginServletTest.java:[18,20] cannot find symbol
      symbol:   variable booln
      location: class LoginServletTest
    [ERROR] /C:/Users/mycomputer/Documents/Selenium/DevOpsWebApp/src/test/java/LoginServletTest.java:[18,19] illegal start of type
    [ERROR] /C:/Users/mycomputer/Documents/Selenium/DevOpsWebApp/src/test/java/LoginServletTest.java:[22,28] cannot find symbol
      symbol:   variable booln
      location: class LoginServletTest
    [INFO] 3 errors
    [INFO] -------------------------------------------------------------
    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD FAILURE
    [INFO] ------------------------------------------------------------------------
    [INFO] Total time: 3.625 s
    [INFO] Finished at: 2018-06-07T12:55:58+05:30
    [INFO] ------------------------------------------------------------------------
    [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:testCompile (default-testCompile) on project DevOpsWebApp: Compilation failure: Compilation failure:
4. test case failures: mvn test (surefire test)
    Results :

    Failed tests:   testUserCheck(LoginServletTest): expected:<true> but was:<false>

    Tests run: 1, Failures: 1, Errors: 0, Skipped: 0

    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD FAILURE
    [INFO] ------------------------------------------------------------------------
    [INFO] Total time: 5.018 s
    [INFO] Finished at: 2018-06-07T12:17:40+05:30
    [INFO] ------------------------------------------------------------------------
    [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test (default-test) on project DevOpsWebApp: There are test failures.
    [ERROR]
    [ERROR] Please refer to C:\Users\mycomputer\Documents\Selenium\DevOpsWebApp\target\surefire-reports for the individual test results.
5. checkstyle errors: mvn checkstyle:checkstyle checkstyle:check
    [ERROR] src\main\java\WelcomeServlet.java:[22] (regexp) RegexpSingleline: Line has trailing spaces.
    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD FAILURE
    [INFO] ------------------------------------------------------------------------
    [INFO] Total time: 58.903 s
    [INFO] Finished at: 2018-06-07T12:59:42+05:30
    [INFO] ------------------------------------------------------------------------
    [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.0.0:check (default-cli) on project DevOpsWebApp: You have 108 Checkstyle violations. -> [Help 1]
6. coverage failure: (jacoco)
    [INFO] --- jacoco-maven-plugin:0.7.5.201505241946:check (jacoco-check) @ DevOpsWebApp ---
    [INFO] Analyzed bundle 'DevOpsWebApp-1.0.0-SNAPSHOT' with 2 classes
    [WARNING] Rule violated for package default: classes covered ratio is 0.50, but expected minimum is 0.80
    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD FAILURE
    [INFO] ------------------------------------------------------------------------
    [INFO] Total time: 15.587 s
    [INFO] Finished at: 2018-06-07T16:59:47+05:30
    [INFO] ------------------------------------------------------------------------
    [ERROR] Failed to execute goal org.jacoco:jacoco-maven-plugin:0.7.5.201505241946:check (jacoco-check) on project DevOpsWebApp: Coverage checks have not been met. See log for details. -> [Help 1]
7. Server offline/access issue: error code 401: (while deploy to any server)
    [ERROR] Tomcat return http status error: 401, Reason Phrase: Invalid password/token for user: tomcat
    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD FAILURE
    [INFO] ------------------------------------------------------------------------
    [INFO] Total time: 18.175 s
    [INFO] Finished at: 2018-05-23T11:30:25+05:30
    [INFO] ------------------------------------------------------------------------
    [ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin:2.2:deploy (default-cli) on project WebApp: Tomcat return http status error: 401, Reason Phrase: Invalid password/token for user: tomcat:  -> [Help 1]
8. No proper permissions on the server: error code 403: (while deploy to any server)
    [ERROR] Tomcat return http status error: 403, Reason Phrase: Forbidden
    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD FAILURE
    [INFO] ------------------------------------------------------------------------
    [INFO] Total time: 5.432 s
    [INFO] Finished at: 2018-05-23T11:40:44+05:30
    [INFO] ------------------------------------------------------------------------
    [ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin:2.2:deploy (default-cli) on project WebApp: Tomcat return http status error: 403, Reason Phrase: Forbidden: <!DOCTYP
    <title>403 Access Denied</title>
9. Jacoco Config error:
    -------------------------------------------------------
     T E S T S
    -------------------------------------------------------
    Error: Could not find or load main class @{argLine}

    Results :

    Tests run: 0, Failures: 0, Errors: 0, Skipped: 0

    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD FAILURE
    [INFO] ------------------------------------------------------------------------
    [INFO] Total time: 5.679 s
    [INFO] Finished at: 2018-06-07T14:12:10+05:30
    [INFO] ------------------------------------------------------------------------
    [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test (default-test) on project DevO
